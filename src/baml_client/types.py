###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing_extensions import TypeAlias
from typing import Dict, Generic, List, Literal, Optional, TypeVar, Union


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str

class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class CitationEntity(BaseModel):
    data_citation: str
    doc_id: str
    pages: List[int]

class CitationExtractor(BaseModel):
    citation_entities: List["CitationEntity"]
    evidence: str

class Document(BaseModel):
    doi: str
    has_dataset_citation: Optional[bool] = None
    full_text: List[str]
    total_char_length: int
    parsed_timestamp: str
    total_tokens: int
    avg_tokens_per_chunk: Optional[float] = None
    file_hash: str
    file_path: str
    n_pages: int
    citation_entities: Optional[List["CitationEntity"]] = None
