###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import typing
from baml_py.baml_py import FieldType, EnumValueBuilder, EnumBuilder, ClassBuilder
from baml_py.type_builder import TypeBuilder as _TypeBuilder, ClassPropertyBuilder, ClassPropertyViewer, EnumValueViewer
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME


class TypeBuilder(_TypeBuilder):
    def __init__(self):
        super().__init__(classes=set(
          ["CitationEntity","DatasetTypeInput",]
        ), enums=set(
          ["DatasetType",]
        ), runtime=DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME)


    @property
    def CitationEntity(self) -> "CitationEntityAst":
        return CitationEntityAst(self)

    @property
    def DatasetTypeInput(self) -> "DatasetTypeInputAst":
        return DatasetTypeInputAst(self)





class CitationEntityAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("CitationEntity")
        self._properties: typing.Set[str] = set([ "evidence",  "data_citation", ])
        self._props = CitationEntityProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "CitationEntityProperties":
        return self._props


class CitationEntityViewer(CitationEntityAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class CitationEntityProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def evidence(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("evidence"))

    @property
    def data_citation(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("data_citation"))

    

class DatasetTypeInputAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("DatasetTypeInput")
        self._properties: typing.Set[str] = set([ "citation",  "text", ])
        self._props = DatasetTypeInputProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "DatasetTypeInputProperties":
        return self._props


class DatasetTypeInputViewer(DatasetTypeInputAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class DatasetTypeInputProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def citation(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("citation"))

    @property
    def text(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("text"))

    



class DatasetTypeAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("DatasetType")
        self._values: typing.Set[str] = set([ "PRIMARY",  "SECONDARY",  "NEITHER", ])
        self._vals = DatasetTypeValues(self._bldr, self._values)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "DatasetTypeValues":
        return self._vals


class DatasetTypeViewer(DatasetTypeAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    def list_values(self) -> typing.List[typing.Tuple[str, EnumValueViewer]]:
        return [(name, EnumValueViewer(self._bldr.value(name))) for name in self._values]


class DatasetTypeValues:
    def __init__(self, enum_bldr: EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values

    

    @property
    def PRIMARY(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("PRIMARY"))
    

    @property
    def SECONDARY(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("SECONDARY"))
    

    @property
    def NEITHER(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("NEITHER"))
    

    


__all__ = ["TypeBuilder"]